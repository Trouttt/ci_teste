name: ci-workflow-teste
on:
  pull_request:
    branches:
      - master
      - staging

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  check-application:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.pull_request.base.ref == 'master' && 'PROD' || 'STAGING'}}
    strategy:
      matrix:
        version-go: ["1.15", "1.16"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Seta variável de ambiente
        run: |
          if [[ "$GITHUB_BASE_REF" == "master" ]]; then
            echo "DEPLOY_ENV=PROD" >> $GITHUB_ENV
          elif [[ "$GITHUB_BASE_REF" == "staging" ]]; then
            echo "DEPLOY_ENV=STAGING" >> $GITHUB_ENV
          fi
          echo "name: ${{ github.event.pull_request.base.ref }}"

          echo '${{ toJson(secrets) }}'
          echo ${{secrets.AWS_REGION}}

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          #aws sts get-caller-identity
          #echo aws sts get-caller-identity

      - name: Checa se existe o bucket que irá alocar os itenss
        id: stack_first_bucket_exists
        run: |
          if aws cloudformation describe-stacks --stack-name $(echo "bucket-setup-${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]') > /dev/null 2>&1; then
            echo "stack_first_bucket_exists=true" >> $GITHUB_ENV
          else
            echo "stack_first_bucket_exists=false" >> $GITHUB_ENV
          fi

      - name: Roda o comando pra atualizar ou criar a pilha
        run: |
          if [ "${{ env.stack_first_bucket_exists }}" = "true" ]; then
            echo "Updating existing stack"
            aws cloudformation update-stack \
              --stack-name $(echo "bucket-setup-${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]') \
              --template-body file://setup/bucket-role.yaml \
              --parameters ParameterKey=StageName,ParameterValue=${{ env.DEPLOY_ENV }} \
              --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          else
            echo "Creating new stack"
            aws cloudformation create-stack \
              --stack-name $(echo "bucket-setup-${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]') \
              --template-body file://setup/bucket-role.yaml \
              --parameters ParameterKey=StageName,ParameterValue=${{ env.DEPLOY_ENV }} \
              --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          fi

      - name: Cria pasta 'log' caso ela não exista
        run: |
          if ! aws s3api list-objects-v2 --bucket your-bucket-name --prefix log/ | grep -q 'Contents'; then
            aws s3api put-object --bucket your-bucket-name --key log/
          fi

      - name: Faz o upload dos arquivos
        run: |
          aws s3 cp ../../log/log-group.yaml s3://testebucketpipeline-${{ env.DEPLOY_ENV }}/log/ --recursive

      - name: Checa se existe a pilha do cloudformation
        id: stack_exists
        run: |
          if aws cloudformation describe-stacks --stack-name teste-pilha-${{ env.DEPLOY_ENV }}; then
            echo "stack_exists=true" >> $GITHUB_ENV
          else
            echo "stack_exists=false" >> $GITHUB_ENV
          fi

      - name: Roda o comando pra atualizar ou criar a pilha
        run: |
          if [ "${{ env.stack_exists }}" = "true" ]; then
            echo "Updating existing stack"
            aws cloudformation update-stack \
              --stack-name teste-pilha-${{ env.DEPLOY_ENV }} \
              --template-body file://template.yaml \
              --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          else
            echo "Creating new stack"
            aws cloudformation create-stack \
              --stack-name teste-pilha-${{ env.DEPLOY_ENV }} \
              --template-body file://template.yaml \
              --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          fi
